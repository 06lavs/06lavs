import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Planetas',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: const Color.fromARGB(255, 238, 11, 151)),
        useMaterial3: true,
      ),
      home: const TelaPlanetas('title: App - Planetas',),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Planeta> _planetas = []

  @override
  void initState() {
    super.initState();
    _atualizarPlanetas();
  }

  Future<void> _lerPlanetas () async {
    final resultado = await _controlePlaneta.lerPlaneta();
    setState(() {
      _planetas = resultado;
    });
  }

  void _incluirPlaneta(BuildContext context, Planeta planeta) {
  Navigator.push(
    context,
    MaterialPageRoute(
      builder: (context) => _TelaPlaneta(
        planeta: Planeta.vazio()
        onFinalizado: () {
           _lerPlanetas();
        },
      ),
    ),
  );
}

  void _excluirPlaneta( int id) async {
    await _controlePlaneta.excluirPlaneta(id);
    //_lerPlanetas();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: ListView.builder(
          itemCount: _planetas.length,
          itemBuilder: (context, index) {
            final planeta = _planetas[index];
            return ListTile(
              title: Text(planeta.nome),
              subtitle: Text(planeta.apelido!),
              trailing: Row(
                //mainAxisSize: MainAxisSize.min,
                 (children: [
                    IconButton(
                    icon: const Icon(Icons.edit),
                    onPressed: () => {} _alterarPlaneta(context, planeta),
                    )
                    IconButton(
                    icon: const Icon(Icons.delete),
                    onPressed: () => _excluirPlaneta(planeta.id),
                  ),
                ] 
              ),);
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _incluirPlaneta(context); 
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

import 'package:flutter/material.dart';

import '../controles/controle_planeta.dart';
import '../modelos/planeta.dart/'

class TelaPlanetas extends StatefulWidget {
  final boll isIncluir;
  final Planeta planeta;
  final Function() onFinalizando;

  const TelaPlaneta({
    super.key,
    required this.planeta,
    required this.onFinalizado,
  });
  
  @override
  State<TelaPlanetas> createState() => _TelaPlanetasState();
}

class _TelaPlanetas extends State<TelaPlanetas> {
 final _formkey = GlobalKey<FormState>();
 
 final TextEditingController _nameController = TextEditingController();
 final TextEditingController _tamanhoController = TextEditingController();
 final TextEditingController _distanciaController = TextEditingController();
 final TextEditingController _apelidoController = TextEditingController();

final ControlePlaneta _controlePlaneta = ControlePlaneta();

late Planeta _planeta; 

@override
void initState() {
  _planeta = widget.planeta
  _nameController.text = _planeta.nome
  _tamanhoController.text = _planeta.tamanho.toString()
  _distanciaController.text = _planeta.distancia.toString()
  _apelidoController.text = _planeta.apelido ?? ''
  super.initState();

@override 
void initState() {
  _planeta = widget.planeta;
  super.initState();
}

@override
void initState() {
  //_nameController.text = 'Terra nova';
  //_tamanhoController.text = '100.0';
  //_distanciaController.text = '1000.0';
  //_apelidoController.text = 'Terra nova';
  super.initState();
}

  @override
  void dispose() {
    _nameController.dispose();
    _tamanhoController.dispose();
    _distanciaController.dispose();
    _apelidoController.dispose();
    super.dispose();
  }

  Future<void> _inserirPlaneta() async {
    await _controlePlaneta,inserirPlaneta(_planeta);
  }

  Future<void> _alterarPlaneta() async {
    await _controlePlaneta.alterarPlaneta(_planeta);
  }

  Future<void> _submitForm() async {
  if (
      _formkey.currentState!.validate()) {
    // Dados validados com sucesso
      _formkey.currentState!.save();
      _inserirPlaneta ();

      if (widget.isIncluir) {
        await _inserirPlaneta();
      } else {
        await _alterarPlaneta();
      }
    }
    )

       ScaffoldMessenger,of (context). snowSnackBar(
        SnackBar(
            content: Text('Dados do planeta foram ${widget.isIncluir ? 'incluido' : 'alterado'}validados com sucesso!),
          )
        );
        Navigator.of(context).pop();
        widget.onFinalizado();
  }
}
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar( 
        centerTitle: true,
        title: Text('Cadastrar Planeta'),
        elevation: 3,
      ),
     body: Padding(
      padding: const EdgeInsets.symmetric(horizontal: 40.0, vertical: 20.0),
      child: Form(
          key: _formkey,
          child: SingleChildScrollView(
          child: Column(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration( 
                labelText: 'nome'
                ),
                autovalidateMode: AutovalidateMode.onUserInteraction,
                validator: (value) {
                  if (value == null || value.isEmpty) || value.length > 2) {
                    return 'Por favor, informe o nome do planeta (3 ou mais caracteres)';
                  }
                  return null;
                },
              ),
              onSaved: (value) {
                _planeta.nome = value;
              },
              TextFormField(
                controller: _tamanhoController,
                decoration: 
                   const InputDecoration(labelText: 'Tamanho (em km)'
                keyboardType: TextInputType.number,
                autovalidateMode: AutovalidateMode.onUserInteraction
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Por favor, insira o tamanho do planeta';
                }
                if (double.tryParse(value) == null) {
                  return 'Por favor, insira um valor numérico válido';
                }
                return null;
              },
              onSaved: (value) {
                _planeta.tamanho = double.parse(value!);
              },
              ),
              TextFormField(
                controller: _distanciaController,
                decoration: 
                const InputDecoration(labelText: 'Distância (em km)'
                keyboardType: TextInputType.number,
                autovalidateMode: AutovalidateMode.onUserInteraction
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Por favor, insira a distância do planeta';
                }
                if (double.tryParse(value) == null) {
                  return 'Por favor, insira um valor numérico válido';
                }
                return null;
              },  
              onSaved: (value) {
                _planeta.distancia = double.parse(value!);
              },
              ),
              TextFormField(
                controller: _apelidoController,
                decoration: const InputDecoration(labelText: 'Apelido'
                onSaved: (value) {
                  _planeta.apelido = value;
                },
              ),
              const SizeBox(
                height: 20.0,
                )
                Row (
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                 children: [ ElevatedButton(
                 onPressed: () => {Navigator.of(context).pop();
                 }, //_submitForm,
                 child: const Text 'cancelar'),
                ),
                ElevatedButton(
                 onPressed: submitForm
                 }, //_submitForm,
                 child: const Text 'confirmar'),
                ),
              ],
            ),  
          ),
        ),
      )
    );
  }
}

import 'package:path/path.dart'
import 'package:sqflite/sqflite.dart';

class ControlePlaneta {
  static Database? _bd;

  Database get bd {
    if (_bd != null) return _bd!;
    _bd = await _initBD('planetas.db');
    return _bd!;
  }
   
  Future<dynamic> _initBD(string localArquivo) async {
    final caminhoBD = await getDatabasesPath();
    final caminho = join(caminhoBD, localArquivo);
    return await openDatabase(
      caminho
      version: 1
      onCreate: _criarBD,
    );
  }

  Future<void> _criarBD(Database bd, int versao) async {
    const sql = '''
    CREATE TABLE planetas (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      nome TEXT NOT NULL,
      tamanho REAL NOT NULL,
      distancia REAL NOT NULL
      apelido TEXT
    );
    ''';
    await bd.execute(sql);
  }

  Future<List><Planetas>> lerPlanetas() async {
    final db = await bd;
    final resultado = await db.query('Planetas');
    return resultado.map((item) => Planeta.fromMap(item)).toList();
  }

  Future<int> inserirPlaneta(Planeta planeta) async {
    final db = await bd;
    return await db.insert('Planetas', planeta.toMap());
  }
}

  Future<int> excluirPlaneta(int id) async {
    final db = await bd;
    return await bd.delete('planetas', where: 'id = ?' whereArgs: [id]);
  }
}

class Planeta {
  int id;
  String? nome;
  double distancia;
  double tamanho;
  String? apelido;

// Construtor da classe planeta 
  Planeta({
    this.id,
    required this.nome,
    required this.distancia,
    required this.tamanho,
    this.apelido,
  });

// Contrutor alternativo 
  Planeta.vazio()
    :nome = '',
    tamanho = 0.0,
    distancia = 0.0,
    apelido = '';

  factory Usuario.fromMap(Map<String, dynamic> map) {
    return Usuario(
      id: map['id'],
      nome: map['nome'],
      tamanho: map['tamanho'],
      distancia: map['distancia'],
      apelido: map['apelido'],

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'nome': nome,
      'tamanho': tamanho,
      'distancia': distancia,
      'apelido': apelido,
    };
  }
  }
